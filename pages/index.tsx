//next
import Head from 'next/head';
import Image from 'next/image';
//react
import { useEffect, useState } from 'react';
//supabase
import supabase from '../supabase.js';
//components
import Tile from '../components/Tile';
//Pictures
import blueline from '../public/blueline.png';
//other
import cookie from "js-cookie";
import { v4 as uuid} from 'uuid';

interface Bar {
  WaitTimeArray: number[];
  CoverFee: number;
  VibeArray: string[];
  imageUrl: string;
  Name: string;
  Bouncer: string;
  Cops: boolean;
}

export default function Home() {
  const [barsData, setBarsData] = useState<Bar[]>([]);

  const getBarsImage = async () => {
    const updatedBarsData = await Promise.all(
      barsData.map(async (bar) => {
        if (bar.imageUrl) {
          return bar; // Return the original object if imageUrl exists
        } else {
          const { data: ImageData, error } = await supabase.storage.from('bars').download(bar.Name)
          if (error) {
            console.error(error);
            return bar;
          } else {
            const blob = new Blob([ImageData]);
            const imageUrl = URL.createObjectURL(blob);
            return {
              ...bar,
              imageUrl,
            };
          }
        }
      })
    );
    setBarsData(updatedBarsData);
  };

  useEffect(() => {
    const getBarsInfo = async () => {
      const { data, error } = await supabase.from('bars').select('*');
      if (error) {
        console.error(error);
      } else {
        console.log(data)
        setBarsData(data || []);
      }
    };

    const setCookies = () => {
      const userId = cookie.get('user') || uuid(); // Get the existing user cookie or generate a new unique identifier
      let visitCount = parseFloat(cookie.get('visitCount') || '0'); // Get the existing visit count or default to 0
      visitCount += 0.5; // Increment the visit count by 0.5
      cookie.set('user', userId);
      cookie.set('visitCount', visitCount.toString());
    };

    setCookies();
    getBarsInfo();
  }, []); 

  useEffect(() => {
    if (barsData.length > 0) {
      getBarsImage();
    }
  }, [barsData]);

  return (
    <div className='flex flex-col items-center'>
        <Head>
          <title>blueline</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="favicon.png" />
        </Head>
        <div className="flex items-center p-4">
          <Image src={blueline} width={75} height={75} alt={''} />
          <h1 className="text-6xl sm:text-7xl md:text-8xl font-bold bg-gradient-to-r from-slate-950 via-blue-800 to-blue-500 bg-clip-text text-transparent pl-4 text-center">
            blueline
          </h1>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-20">
          {barsData.map((bar) => (
            <Tile
              WaitTimeArray={bar.WaitTimeArray}
              CoverFee={bar.CoverFee}
              VibeArray={bar.VibeArray}
              ImageUrl={bar.imageUrl}
              Name={bar.Name}
              Bouncer={bar.Bouncer}
              Cops={bar.Cops}
            />
          ))}
        </div>
    </div>
  )
}