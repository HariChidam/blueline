//next
import Head from 'next/head';
import Image from "next/legacy/image";
//react
import { useEffect, useState } from 'react';
//supabase
import supabase from '../supabase.js';
import { User, Session, AuthChangeEvent } from '@supabase/supabase-js';
//components
import Tile from '../components/Tile';
//Pictures
import blueline from '../public/blueline.png';
//other
import cookie from "js-cookie";
import {v4 as uuid} from 'uuid';

interface Bar {
  WaitTimeArray: number[];
  CoverFee: number;
  VibeArray: string[];
  imageUrl: string;
  Name: string;
  Bouncer: string;
  Cops: boolean;
  xcoord: number;
  ycoord: number;
}

export default function Home() {
  const [barsData, setBarsData] = useState<Bar[]>([]);
  const [user, setUser] = useState<User | null>(null);
  const [userxcoord, setUserxcoord] = useState(0);
  const [userycoord, setUserycoord] = useState(0);
  const [numVisited, setNumVisited] = useState(0);
  const [searchQuery, setSearchQuery] = useState('');

  const getBarsImage = async () => {
    const updatedBarsData = await Promise.all(
      barsData.map(async (bar) => {
        if (bar.imageUrl) {
          return bar; // Return the original object if imageUrl exists
        } else {
          const { data: ImageData, error } = await supabase.storage.from('bars').download(bar.Name)
          if (error) {
            console.error(error);
            return bar;
          } else {
            const blob = new Blob([ImageData]);
            const imageUrl = URL.createObjectURL(blob);
            return {
              ...bar,
              imageUrl,
            };
          }
        }
      })
    );
    setBarsData(updatedBarsData);
  };


  const handleAuthStateChange = (event: AuthChangeEvent, session: Session | null) => {
    if (event === 'SIGNED_IN' && session?.user) {
      console.log('SIGNED_IN', session.user);
      setUser(session.user);
    }
    if (event === 'SIGNED_OUT') {
      console.log('SIGNED_OUT');
      setUser(null);
    }
  };
  
  useEffect(() => {
    supabase.auth.onAuthStateChange(handleAuthStateChange);
  }, []);

  useEffect(() => {
    navigator.geolocation.getCurrentPosition(position => {
      const { latitude, longitude } = position.coords;
      // Show a map centered at latitude / longitude.
      console.log(latitude, longitude)
      setUserxcoord(latitude);
      setUserycoord(longitude);
    });

  }, [userxcoord , userycoord]);

  const handleGoogleSignIn = async () => {
    const {data , error} = await supabase.auth.signInWithOAuth({provider: 'google'});
    console.log('here')
    console.log(data)
    console.log(error)
  }

  const handleGoogleSignOut = async () => {
    const {error} = await supabase.auth.signOut();
  }

  useEffect(() => {
    const getBarsInfo = async () => {
      const { data, error } = await supabase.from('bars').select('*');
      if (error) {
        console.error(error);
      } else {
        console.log(data)
        setBarsData(data || []);
      }
    };

    const setCookies = () => {
      const userId = cookie.get('user') || uuid(); // Get the existing user cookie or generate a new unique identifier
      let visitCount = parseFloat(cookie.get('visitCount') || '0'); // Get the existing visit count or default to 0
      visitCount += 1; // Increment the visit count by 0.5
      cookie.set('user', userId);
      cookie.set('visitCount', visitCount.toString());
      setNumVisited(visitCount);
    };

    setCookies();
    getBarsInfo();
  }, []); 

  useEffect(() => {
    if (barsData.length > 0) {
      getBarsImage();
    }
  }, [barsData]);

  const filteredBars = barsData.filter((Bar) =>
    Bar.Name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <div className="flex flex-col items-center">
      <Head>
        <title>blueline</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="favicon.png" />
      </Head>

      <div className='flex flex-col items-center pb-8'>
        <div className="flex items-center w-full h-20 p-8">
          <Image src={blueline} width={75} height={75} alt="" />
          <h1 className="text-6xl bg-gradient-to-r from-slate-950 via-blue-800 to-blue-500 sm:text-7xl md:text-8xl font-bold bg-clip-text text-transparent pl-4">
            blueline
          </h1>
        </div>
        {numVisited > 10 &&
          (
            <div className='pt-8'>
              {user ? (
                <button
                  className="bg-gradient-to-r from-slate-950 via-blue-800 to-blue-500 text-white font-bold p-2 rounded-lg shadow hover:scale-105 hover:shadow-lg"
                  onClick={handleGoogleSignOut}
                >
                  Sign Out
                </button>
              ) : (
                <button
                  className="bg-gradient-to-r from-slate-950 via-blue-800 to-blue-500 text-white font-bold p-2 rounded-lg shadow hover:scale-105 hover:shadow-lg"
                  onClick={handleGoogleSignIn}
                >
                  Sign In w/ UMich
                </button>
              )}
            </div>
          )
        }
      </div>

      {
        numVisited > 11 ? (
          user && (
            <div>
              <div className="flex justify-center items-center pb-4">
                <input
                  type="text"
                  placeholder="Search by name..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="border rounded-md p-2 w-1/2 border-blue-950"
                />
              </div>
              <div className="grid grid-cols-1 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-20">
                {filteredBars.map((bar) => (
                  <Tile
                    WaitTimeArray={bar.WaitTimeArray}
                    CoverFee={bar.CoverFee}
                    VibeArray={bar.VibeArray}
                    ImageUrl={bar.imageUrl}
                    Name={bar.Name}
                    Bouncer={bar.Bouncer}
                    Cops={bar.Cops}
                    xcoord={bar.xcoord}
                    ycoord={bar.ycoord}
                    userxcoord={userxcoord}
                    userycoord={userycoord}
                  />
                ))}
              </div>
            </div>
          )
        ) : (
          <div>
              <div className="flex justify-center items-center pb-4">
                <input
                  type="text"
                  placeholder="Search by name..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="border rounded-md p-2 w-1/2 border-blue-950"
                />
              </div>
              <div className="grid grid-cols-1 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-20">
                {filteredBars.map((bar) => (
                  <Tile
                    WaitTimeArray={bar.WaitTimeArray}
                    CoverFee={bar.CoverFee}
                    VibeArray={bar.VibeArray}
                    ImageUrl={bar.imageUrl}
                    Name={bar.Name}
                    Bouncer={bar.Bouncer}
                    Cops={bar.Cops}
                    xcoord={bar.xcoord}
                    ycoord={bar.ycoord}
                    userxcoord={userxcoord}
                    userycoord={userycoord}
                  />
                ))}
              </div>
            </div>
        )
      }

    </div>
  );
};